name: Build and Release
on:
  push:
    branches: [ master ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - '.github/**'
      - '!.github/workflows/**'
      - 'README'
      - 'LICENSE'
jobs:
  build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '7.0.x'
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.10.2
      with:
        preferLatestVersion: true
    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.10.2
    - name: Generate changelog
      id: changelog
      run: |
        $lastTag = git describe --tags --abbrev=0 2>$null
        if ($lastTag) {
          $range = "$lastTag..HEAD"
        } else {
          $range = "HEAD"
        }
        
        # Group commits by type
        $commits = git log $range --pretty=format:"%h|%s|%an" --reverse
        $features = @()
        $fixes = @()
        $other = @()
        
        foreach ($commit in $commits -split "`n") {
            $parts = $commit -split "\|"
            $hash = $parts[0]
            $message = $parts[1]
            $author = $parts[2]
            
            if ($message -match "^feat(\(.+\))?!?: ") {
                $features += "- $($message -replace '^feat(\(.+\))?: ','') ([`$hash](../../commit/$hash)) - $author"
            }
            elseif ($message -match "^fix(\(.+\))?: ") {
                $fixes += "- $($message -replace '^fix(\(.+\))?: ','') ([`$hash](../../commit/$hash)) - $author"
            }
            else {
                $other += "- $($message) ([`$hash](../../commit/$hash)) - $author"
            }
        }

        # Generate markdown
        $changelog = @"
## What's Changed

### ✨ New Features
$($features -join "`n")

### 🐛 Bug Fixes
$($fixes -join "`n")

### 🔄 Other Changes
$($other -join "`n")

### 👥 Contributors
$(git log $range --format="- %an" | Sort-Object -Unique)
"@
        
        $changelog | Out-File -FilePath changelog.md -Encoding UTF8
        
        # Escape for GitHub Actions output
        $escaped = $changelog -replace '%', '%25' -replace "`n", '%0A' -replace "`r", '' -replace ':', '%3A'
        echo "changelog=$escaped" >> $env:GITHUB_OUTPUT
    - name: Build
      run: |
        dotnet restore
        dotnet build --configuration Release /p:Version=${{ steps.gitversion.outputs.semVer }}
        dotnet pack --configuration Release /p:Version=${{ steps.gitversion.outputs.semVer }} --no-build --output nupkg
    - name: Test
      run: dotnet test --configuration Release --no-build
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.gitversion.outputs.semVer }}
        release_name: Release v${{ steps.gitversion.outputs.semVer }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false
    - name: Upload DLL Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./bin/Release/net7.0/SmallBin.dll
        asset_name: SmallBin.dll
        asset_content_type: application/octet-stream
    - name: Upload NuGet Package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./nupkg/SmallBin.${{ steps.gitversion.outputs.semVer }}.nupkg
        asset_name: SmallBin.${{ steps.gitversion.outputs.semVer }}.nupkg
        asset_content_type: application/zip
    - name: Push to NuGet
      run: dotnet nuget push ./nupkg/SmallBin.${{ steps.gitversion.outputs.semVer }}.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
